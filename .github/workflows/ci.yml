name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-linux:
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        cxx: [g++-10, g++-11, clang++-10, clang++-11, clang++-12]
        std: [20]
        build_type: [Debug, Release]

    steps:
    - name: Get Dependencies
      run: |
        if ! command -v ${{ matrix.cxx }} &> /dev/null ; then
          if [[ "${{matrix.cxx}}" == "g++"* ]]; then
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          else
            sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal main"
            sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main"
            sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-12 main"
          fi

          sudo apt-get update
          sudo apt-get install ${{ matrix.cxx }}
        fi

    - name: Print Configuration
      run: |
        ${{ matrix.cxx }} --version
        echo std=c++${{ matrix.std }}
        cmake --version
    - uses: actions/checkout@v2

    - name: Configure
      run: cmake -S. -B${{ runner.workspace }}/build
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}
            -DCMAKE_CXX_STANDARD=${{ matrix.std }}
            -DCMAKE_CXX_FLAGS_INIT="-Wall -Wextra -Werror"

    - name: Build
      working-directory: ${{ runner.workspace }}/build
      run: cmake --build . --config ${{ matrix.build_type }} -j3

    - name: Run Tests
      working-directory: ${{ runner.workspace }}/build
      run: ctest -C ${{ matrix.build_type }} -VV

  build-windows:
    runs-on: windows-latest

    strategy:
      matrix:
        std: [20]
        build_type: [Debug, Release]

    steps:
    - name: Print Configuration
      run: |
        echo std=c++${{ matrix.std }}
        cmake --version
    - uses: actions/checkout@v2

    - name: Configure
      run: cmake -S. -B${{ runner.workspace }}/build
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
            -DCMAKE_CXX_STANDARD=${{ matrix.std }}
            -DCMAKE_CXX_FLAGS_INIT="/permissive- /W4 /WX"

    - name: Build
      id: build
      working-directory: ${{ runner.workspace }}/build
      run: ls && cmake --build . --config ${{ matrix.build_type }} -j3
      continue-on-error: true # MSVC currently ICEs

    - name: Run Tests
      working-directory: ${{ runner.workspace }}/build
      run: ctest -C ${{ matrix.build_type }} -VV
      continue-on-error: ${{ steps.build.outcome != 'success' }}

  build-macos:
    runs-on: macos-latest

    strategy:
      matrix:
        std: [20]
        build_type: [Debug, Release]

    steps:
    - name: Print Configuration
      run: |
        echo std=c++${{ matrix.std }}
        cmake --version
    - uses: actions/checkout@v2

    - name: Configure
      run: cmake -S. -B${{ runner.workspace }}/build
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
            -DCMAKE_CXX_STANDARD=${{ matrix.std }}
            -DCMAKE_CXX_FLAGS_INIT="-Wall -Wextra -Werror"

    - name: Build
      id: build
      working-directory: ${{ runner.workspace }}/build
      run: cmake --build . --config ${{ matrix.build_type }} -j3

    - name: Run Tests
      working-directory: ${{ runner.workspace }}/build
      run: ctest -C ${{ matrix.build_type }} -VV

  build-dds:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        toolchain: [gcc-10.tc.json5]

    steps:
    - name: Install Dependencies
      run: |
        mkdir -p ${{ runner.workspace }}/bin && cd ${{ runner.workspace }}/bin
        wget -nv https://github.com/vector-of-bool/dds/releases/download/0.1.0-alpha.6/dds-linux-x64
        chmod +x dds-linux-x64
        ln -s $PWD/dds-linux-x64 dds
    - name: Print Configuration
      run: |
        echo ${{ matrix.toolchain }}
        ${{ runner.workspace }}/bin/dds --help
    - uses: actions/checkout@v2
      with:
        path: src

    - name: Build
      run: |
        cd src
        sed -Ei "s/(warning_flags:.*)'/\1 -Werror'/g" tools/${{ matrix.toolchain }}
        ${{ runner.workspace }}/bin/dds build -t tools/${{ matrix.toolchain }}

  example-dds:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        toolchain: [gcc-10.tc.json5]

    steps:
    - name: Install Dependencies
      run: |
        mkdir -p ${{ runner.workspace }}/bin && cd ${{ runner.workspace }}/bin
        wget -nv https://github.com/vector-of-bool/dds/releases/download/0.1.0-alpha.6/dds-linux-x64
        chmod +x dds-linux-x64
        ln -s $PWD/dds-linux-x64 dds
    - name: Print Configuration
      run: |
        echo ${{ matrix.toolchain }}
        ${{ runner.workspace }}/bin/dds --help
    - uses: actions/checkout@v2
      with:
        path: src

    - name: Build
      run: |
        cd src
        sed -Ei "s/(warning_flags:.*)'/\1 -Werror'/g" tools/${{ matrix.toolchain }}
        ${{ runner.workspace }}/bin/dds build -t tools/${{ matrix.toolchain }} -p examples/dds --add-repo="https://quincunx271.github.io/dds-repos/public"

  example-cmake-fetchcontent:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        cxx: [g++-10]

    steps:
    - name: Print Configuration
      run: |
        ${{ matrix.cxx }} --version
        cmake --version
    - uses: actions/checkout@v2

    - name: Configure
      run: cmake -Sexamples/cmake-fetchcontent -B${{ runner.workspace }}/build
            -DCMAKE_BUILD_TYPE=Debug
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}

    - name: Build
      run: cmake --build ${{ runner.workspace }}/build

    - name: Test
      run: ctest -VV --test-dir ${{ runner.workspace }}/build

  example-cmake-findpackage:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        cxx: [g++-10]

    steps:
    - name: Print Configuration
      run: |
        ${{ matrix.cxx }} --version
        cmake --version
    - uses: actions/checkout@v2

    - name: Configure TerseLambda
      run: cmake -S. -B${{ runner.workspace }}/build-library
            -DCMAKE_BUILD_TYPE=Debug
            -DCMAKE_INSTALL_PREFIX=$PWD/install
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}

    - name: Build TerseLambda
      run: cmake --build ${{ runner.workspace }}/build-library --target install

    - name: Configure Example
      run: cmake -Sexamples/cmake-findpackage -B${{ runner.workspace }}/build-example
            -DCMAKE_BUILD_TYPE=Debug
            -DCMAKE_INSTALL_PREFIX=$PWD/install
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}

    - name: Build Example
      run: cmake --build ${{ runner.workspace }}/build-example

    - name: Test Example
      run: ctest -VV --test-dir ${{ runner.workspace }}/build-example
